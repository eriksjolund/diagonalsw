<?xml version="1.0" encoding="UTF-8"?>
<root><file><![CDATA[

#include <stdio.h>
#include <tmmintrin.h>
#include <emmintrin.h>
#include <xmmintrin.h>
#include <smmintrin.h>  
#include <pmmintrin.h>


#include "sw_constants.h"
#include "smith_waterman_vector.h"
#include "sse_funcs.h"


]]><variant type="normal">
size_t workspace_needed_for_word_version(int db_length )
{ 
  return  (db_length+7)*2 ;
}
</variant>

int
smith_waterman_vector_word<variant type="H">_H</variant><variant type="EFH">_EFH</variant>
(unsigned char *     query_sequence,
                            unsigned short *    query_profile_word,
                            int                 query_length,
                            unsigned char *     db_sequence,
                            int                 db_length,
                            unsigned short      bias,
                            unsigned short      gap_open,
                            unsigned short      gap_extend,
                            unsigned short *    workspace
<variant type="H">,         unsigned short *    Hmatrix
</variant>
<variant type="EFH">,       unsigned short *    Ematrix,
			    unsigned short *    Fmatrix,
			    unsigned short *    Hmatrix
</variant><![CDATA[
)
{
    int                     i,j,k;
    unsigned short *        p;
    unsigned short          score;   
    unsigned char *         p_dbseq;
    
    __m128i   Fup,Hup1,Hup2,E,F,H,tmp;
    __m128i    perm;
    __m128i   v_maxscore;
    __m128i   v_bias,v_gapopen,v_gapextend;
    __m128i   v_score;
    __m128i   v_score_q1;
    __m128i   v_score_q2;
    __m128i   v_score_q3;
    __m128i   v_score_load; 
    __m128i   HFload,HFsave;

    __m128i v0;
    __m128i v1;
    __m128i v2;
    __m128i v3;
    __m128i v4;
    __m128i v5;
    __m128i v6;
    __m128i v7;



    const  __m128i mask1=_mm_set_epi8(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255);
    const  __m128i mask2=_mm_set_epi8(0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255);
    const  __m128i mask3=_mm_set_epi8(0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255);



      
    /* Load the bias to all elements of a constant */
    v_bias = _mm_set1_epi16(bias);  

  
    /* Load gap opening penalty to all elements of a constant */
    v_gapopen = _mm_set1_epi16(gap_open);  

    /* Load gap extension penalty to all elements of a constant */
    v_gapextend = _mm_set1_epi16(gap_extend);  

    v_maxscore = _mm_setzero_si128();
   
    // Zero out the storage vector 
//    k = 2*(db_length+7);
    k = (db_length+7)/4;
        
    __m128i * iter_ptr;
    for(i=0, iter_ptr =  ( __m128i * ) workspace  ;i<k;i++,iter_ptr++)
    {
        // borrow the zero value in v_maxscore to have something to store

      /*
        vec_st(v_maxscore,j,workspace);
      */
      _mm_store_si128( (__m128i *) iter_ptr ,v_maxscore);
    }

    
    for(i=0;i<query_length;i+=8)
    {
        int dbindex=0;

        v0=_mm_set1_epi8(0);
        v1=_mm_set1_epi8(0);
        v2=_mm_set1_epi8(0);
        v3=_mm_set1_epi8(0);
        v4=_mm_set1_epi8(0);
        v5=_mm_set1_epi8(0);
        v6=_mm_set1_epi8(0);
//         v7=_mm_set1_epi8(0);



        p_dbseq    = db_sequence;
        k          = *p_dbseq++;


        v_score_load =  _mm_load_si128( (__m128i *) ( query_profile_word + 8*k ) );


        // zero lots of stuff. 
        // We use both the VPERM and VSIU unit to knock off some cycles.


        E          = _mm_setzero_si128();
        F          = _mm_setzero_si128();
        H          = _mm_setzero_si128();
        Hup2      = _mm_setzero_si128();
        v_score_q1 = _mm_setzero_si128();
        v_score_q2 = _mm_setzero_si128();
        v_score_q3 = _mm_setzero_si128();


        // reset pointers to the start of the saved data from the last row
        p = workspace;


]]>
<repl/><repl/><repl/><repl/>
<repl/><repl/><repl/><repl/>
<![CDATA[
   

        for(j=8;j<db_length;j+=8)
        {           


]]>
<repl/><repl/><repl/><repl/>
<repl/><repl/><repl/><repl/>
<![CDATA[

        }

]]>

<repl/><repl/><repl/><repl/>
<repl/><repl/><repl/>

<![CDATA[

ending:
   HFsave=_mm_alignr_epi8(HFsave,F,14);
   HFsave=_mm_alignr_epi8(HFsave,H,14);


for ( j = 0 ; j <   3 - (( db_length -1 ) % 4 ) ; j++ )
{
   HFsave = _mm_slli_si128(HFsave, 4  );
}

       _mm_store_si128( (__m128i *) ( p -16 ), HFsave);
       query_profile_word += 8*ALPHABET_SIZE;
    }

    // find largest score in the v_maxscore vector

    tmp = _mm_alignr_epi8(v_maxscore,v_maxscore,8);
    v_maxscore = _mm_max_epu16(v_maxscore,tmp);
    tmp = _mm_alignr_epi8(v_maxscore,v_maxscore,4);
    v_maxscore = _mm_max_epu16(v_maxscore,tmp);
    tmp = _mm_alignr_epi8(v_maxscore,v_maxscore,2);
    v_maxscore = _mm_max_epu16(v_maxscore,tmp);


    // store in temporary variable
    score=_mm_extract_epi16(v_maxscore,0);
    
    // return largest score
    return score;
}


]]></file><repl-text>
<range min="16" max="22">
   if ( j >= db_length+7 ) goto ending;
</range>

<range min="0" max="15">
        // prefetch next residue
        k          = *p_dbseq++;
        // Create the actual diagonal score vector
        // and update the queue of incomplete score vectors
</range>


  <range min="8" max="22">
   HFsave=_mm_alignr_epi8(HFsave,F,14);
   HFsave=_mm_alignr_epi8(HFsave,H,14);
  </range>
       

v<eval>($pos+7) mod 8</eval> = v_score_load;

       v<eval>($pos+3) mod 8</eval>=_mm_blendv_epi8(v<eval>($pos+3) mod 8</eval>,v<eval>($pos+7) mod 8</eval>,mask1);
       v<eval>($pos+1) mod 8</eval>=_mm_blendv_epi8(v<eval>($pos+1) mod 8</eval>,v<eval>($pos+3) mod 8</eval>,mask2);
       v<eval>($pos+0) mod 8</eval>=_mm_blendv_epi8(v<eval>($pos+0) mod 8</eval>,v<eval>($pos+1) mod 8</eval>,mask3);

v_score     = v<eval>($pos+0) mod 8</eval>;

        E   = _mm_max_epu16(_mm_subs_epu16(E,v_gapextend),_mm_subs_epu16(H,v_gapopen));

<range min="0" max="15">
        // prefetch score for next step 

        v_score_load =  _mm_load_si128( (__m128i *) ( query_profile_word + 8*k ) );
        
</range>


  <range min="11" max="11">
   _mm_store_si128( (__m128i *) (  p - 16 ), HFsave);
//   HFsave = _mm_setzero_si128();
  </range>

  <range min="15" max="15">
   _mm_store_si128( (__m128i *) (  p - 16 ), HFsave);
 //  HFsave = _mm_setzero_si128();
  </range>

  <range min="19" max="19">
   _mm_store_si128( (__m128i *) (  p - 16 ), HFsave);
  // HFsave = _mm_setzero_si128();
  </range>

  <range min="0" max="0"> HFload  =  _mm_load_si128( (__m128i *) p );  </range>
  <range min="4" max="4"> HFload  =  _mm_load_si128( (__m128i *) p ); </range>
  <range min="8" max="8"> HFload  =  _mm_load_si128( (__m128i *) p ); </range>
  <range min="12" max="12"> HFload  =  _mm_load_si128( (__m128i *) p ); </range>

  <range min="3" max="3">   p += 8; </range>
  <range min="7" max="7">   p += 8; </range>
  <range min="11" max="11"> p += 8; </range>
  <range min="15" max="15"> p += 8; </range>
  <range min="19" max="19"> p += 8; </range>

  <range min="0" max="15">
   // shift into place so we have complete F and H vectors
   // that refer to the values one unit up from each cell
   // that we are currently working on.
   Fup = _mm_alignr_epi8(F,HFload,14);
   HFload=_mm_slli_si128(HFload,2);
  </range>

  <range min="0" max="15">
   Hup<eval>($pos mod 2)+1</eval>   = _mm_alignr_epi8(H,HFload,14);
   HFload=_mm_slli_si128(HFload,2);
  </range> 


<range min="16" max="22">
   
            Fup    =  _mm_slli_si128(F,2); 
            Hup<eval>($pos mod 2)+1</eval>    = _mm_slli_si128(H,2); 

</range>

        // do the dynamic programming 


        // update F value
        F   = _mm_subs_epu16(Fup,v_gapextend);
        tmp = _mm_subs_epu16(Hup<eval>($pos mod 2)+1</eval>,v_gapopen);
        F   = _mm_max_epu16(F,tmp);
        
        // add score to H
        H   =  _mm_adds_epu16(Hup<eval>(($pos + 1) mod 2)+1</eval>,v_score);
        H   =  _mm_subs_epu16(H,v_bias);
        
        // set H to max of H,E,F
        H   = _mm_max_epu16(H,E);
        H   = _mm_max_epu16(H,F);


<variant type="H">
 set_matrix_values_from_diagonal_word_vector(H,Hmatrix,i,query_length,dbindex,db_length);
 dbindex++;
</variant>
<variant type="EFH">
 set_matrix_values_from_diagonal_word_vector(E,Ematrix,i,query_length,dbindex,db_length);
 set_matrix_values_from_diagonal_word_vector(F,Fmatrix,i,query_length,dbindex,db_length);
 set_matrix_values_from_diagonal_word_vector(H,Hmatrix,i,query_length,dbindex,db_length);
 dbindex++;
</variant>
        
        // Update highest score encountered this far
        v_maxscore = _mm_max_epu16(v_maxscore,H);


<range min="16" max="22">
        j++;  
</range>

</repl-text></root>
